###문제###
#3개의 입력값 c(1600, 2700, 3900)에 대해 거스름돈 500원 100원의 개수를 표현해라
c2 = c(1600%/%500,2700%/%500, 3900%/%500)
c3 = c((1600%%500)%/%100, (2700%%500)%/%100,(3900%%500)%/%100)
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
3//2
3%/%2
3%%2
5%%2
5%%3
2%/%7
3%/%7
3/7
3%%7
c1 = c(1600, 500, 100)
c2 = c(c1%/%500)
c2 = c(c1%/%500); c2
c2 = c1%/%500; c2
c1 = c(1600, 2700, 3900)
c2 = c1%/%500; c2
c3 = c(c2%%100)
c3 = c(c2%%100)
c3 = c2%%100)
c3 = c2%%100
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
c3 = c((1600%%500)%/%100, (2700%%500)%/%100,(3900%%500)%/%100)
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
v3 = c1%%500
c3 = v3%/$100
c3 = v3%/%100
c3 = v3%/%100
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
v1 = c(1600, 2700, 3900)
c2 = v1%/%500
v3 = v1%%500
c3 = v3%/%100
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
v1 = c(1600, 2700, 3900)
c2 = v1%/%500
v3 = v1%%500
c3 = v3%/%100
m3 = cbind(c2,c3); m3
colnames(m3) = c('500원','100원')
rownames(m3) = c('1600원','2700원','3900원'); m3
paste0(v1,'원원')
paste0(v1,'원')
paste(v1,'원')
#위 함수로 새롭게 rowname을 지정할 수 있다
rownames(m3) = paste0(v1, '원'); m3
matrix(0, nrow = 9, ncol = 8)
matrix(0, nrow = 9, ncol = 8); m1
matrix(0, nrow = 9, ncol = 8); m3
matrix(0, nrow = 9, ncol = 8);
m1 = matrix(0, nrow = 9, ncol = 8); m1
for(rr in 1:9)
cat(rr)
cat(rr)
for(cc in 2:9)
for(rr in 1:9)
cat(rr)
cat(cc,rr)
for(cc in 2:9)
for(rr in 1:9)
cat(cc,rr)
for(cc in 2:9)
for(rr in 1:9)
cat(cc,rr,'\n')
for(cc in 2:9)
for(rr in 1:9)
cat(cc,rr,'\n')
m1[rr,cc-1] = cc*rr
m1
for(cc in 2:9)
for(rr in 1:9)
{
cat(cc,rr,'\n')
m1[rr,cc-1] = cc*rr
}
m1
for(cc in 2:9)
for(rr in 1:9)
{
m1[rr,cc-1] = cc*rr
}
m1
colnames(m1) = paste0(2:9,'단'); m1
rownames(m1) = paste('x',1:9); m1
colnames(m1) = paste0(2:9,'단 '); m1
colnames(m1) = paste0(2:9,'단  '); m1
rownames(m1) = paste('x',1:9); m1
colnames(m1) = paste0(2:9,'단단'); m1
colnames(m1) = paste0(2:9,'단'); m1
rownames(m1) = paste('x',1:9); m1
View(m1)
view(m1)
m1 = matrix(0, nrow = 9, ncol = 8); m1
for(cc in 2:9)
for(rr in 1:9)
{
m1[rr,cc-1] = cc*rr
}
m1
colnames(m1) = paste0(2:9,'단'); m1
save(m1, file='gugudan.rda') #변수를 파일로 저장하는 함수
#구구단의 결과가 짝수 부분만 0으로 치환해보자
#반복문, TF마스크, ifalse() 마스크, which() 함수를 이용
m1
load("D:/대학생활/2021년도 (3학년)/2021-1/데이터사이언스기초/R/w7_R/gugudan.rda")
#구구단의 결과가 짝수 부분만 0으로 치환해보자
#반복문, TF마스크, ifalse() 마스크, which() 함수를 이용
m1
#불러올 때 매번 파일을 클릭하기 귀찮기 때문에
#load 함수 사용
load('gugudan.rda')
#구구단의 결과가 짝수 부분만 0으로 치환해보자
#반복문, TF마스크, ifalse() 마스크, which() 함수를 이용
for(cc in 2:9)
for(rr in 1:9)
{
if(m1[rr,cc-1] %%2 == 0)
m1[rr,cc-1] = 0
}
m1
#방법2 TF마스크 사용
load('gugudan.rda')
m1%%2 == 0
m1[m1%%2 == 0] == 0
m1[m1%%2 == 0] == 0; m1
m1[m1%%2 == 0] = 0; m1
m1[ifelse(m1%%2 == 0, T, F)] = 0; m1
#방법2 TF마스크 사용 ->연산자 마스크
load('gugudan.rda')
m1[ifelse(m1%%2 == 0, T, F)] = 0; m1
#방법4 which() 사용
load('gugudan.rda')
m1[2,1] = 0; m1
m1[3,1] = 0; m1
m1[c(2,3)] = 0; m1
#방법4 which() 사용
load('gugudan.rda')
m1[c(2,3)] = 0; m1
m1 = matrix(0, nrow = 9, ncol = 8); m1
for(cc in 2:9)
for(rr in 1:9)
{
m1[rr,cc-1] = cc*rr
}
m1
colnames(m1) = paste0(2:9,'단'); m1
rownames(m1) = paste('x',1:9); m1
#변수를 파일로 저장하는 함수 save
#매번 코드를 실행시켜 변수를 만들기 귀찮기 때문에
#save 함수로 데이터 파일을 만듦
save(m1, file='gugudan.rda')
#방법4 which() 사용
load('gugudan.rda')
m1[2,1] = 0; m1 #각 [행,열] 인덱스가 0으로 바뀜
m1[3,1] = 0; m1
#매트릭스는 열우선 진행
m1[c(2,3)] = 0; m1
m1[c(2,3,11,12)] = 0; m1
which(m1%%2==0)
m1[which(m1%%2==0)]
m1[which(m1%%2==0)] = 0; m1
m1[m1%%2 == 0]
#방법2 TF마스크 사용 ->연산자 마스크 ->R과 파이썬
load('gugudan.rda')
m1[m1%%2 == 0]
m1[m1%%2 == 0]; m1
m1[m1%%2 == 0] = 0; m1
m1 = m1[m1%%2 == 0]
m1
m1[m1%%2 == 0] = 0; m1
#방법2 TF마스크 사용 ->연산자 마스크 ->R과 파이썬
load('gugudan.rda')
m1[m1%%2 == 0] = 0; m1
#방법3 ifelse()마스크 함수 이용 ->R에서만 사용
load('gugudan.rda')
ifelse(m1%%2 == 0, T, F) #트루면 TRUE.펄스면 FALSE
m1[c(2,3,11,12)] = 0; m1
#방법4 which() 사용 -> R과 파이썬
load('gugudan.rda')
#m1을 2로 나눴을 때 나머지가 0인 애들의 위치 반환
which(m1%%2==0)
m1[which(m1%%2==0)] = 0; m1
#m1을 2로 나눴을 때 나머지가 0인 애들의 위치 반환
which(m1%%2==0)
