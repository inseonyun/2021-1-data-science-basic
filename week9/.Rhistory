c(3,4)
v1 = c(3,4) #vector
v2 = c(4,5)
rbind(v1, v2)
matrix(1:12, nrow = 3, ncol = 4)
matrix(1:11, nrow = 3, ncol = 4)
matrix(1:12, nrow = 3, ncol = 4)
#주의, 열 우선 순위로 데이터 삽입
#행 우선 순위로 하려면?
matrix(1:12, nrow = 3, ncol = 4, byrow = T)
array(1:24,c(3,4,2))
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(1:5)
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5)
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5, bb = letters(1:5))
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5, bb = letters[1:5])
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5, bb = letters[1:5], factor(1:5))
as.factor(1:5)
#as 키워드 -> 어떠한 데이터가 들어올건데 .xxx인 타입으로 바꿔줘라(형변환)
as.factor(c(1:5)
#as 키워드 -> 어떠한 데이터가 들어올건데 .xxx인 타입으로 바꿔줘라(형변환)
as.factor(c(1:5))
#as 키워드 -> 어떠한 데이터가 들어올건데 .xxx인 타입으로 바꿔줘라(형변환)
as.factor(c(1:5))
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5, bb = letters[1:5], as.factor(c(1:5)))
#열 단위로 데이터들이 같은 데이터 타입이라면??
data.frame(aa = 1:5, bb = letters[1:5], cc = as.factor(c(1:5)))
m1 = matrix(1:12, nrow = 3, ncol = 4)
#c(행, 열, 면) -> 3차원데이터 다룰 때 사용
# 행, 열인 2차원 배열을 몇 면으로 이룰것인가
arr1 = array(1:24,c(3,4,2))
#data.frame()
#열 단위로 데이터들이 같은 데이터 타입이라면??
df1 = data.frame(aa = 1:5, bb = letters[1:5], cc = as.factor(c(1:5)))
#서로 다른 데이터들(1차원 2차원 ...등등) 컨데이터 사용
#리스트 -> 비정형 데이터(정형화 되있지 않은 데이터)
list(v1, m1, arr1, df1)
#서로 다른 데이터들(1차원 2차원 ...등등) 컨데이터 사용
#리스트 -> 비정형 데이터(정형화 되있지 않은 데이터)
lt1 = list(v1, m1, arr1, df1)
lt[3]
lt1[3]
lt1[2]
sex = c(1,0,0,1,1,1)
factor(sex, levels = c(1,0))
factor(sex)
, levels = c(1,0)
factor(sex, levels = c(1,0))
factor(sex, levels = c(1,0),
label = 남자자)
factor(sex, levels = c(1,0),
label = c('남','여여'))
factor(sex, levels = c(1,0),
label = c('남','여'))
sex.factor(sex, levels = c(1,0),
label = c('남','여'))
sex.factor(sex, levels = c(1,0),
label = c('남','여'))
sex.factor = factor(sex, levels = c(1,0),
label = c('남','여'))
#테이블 함수를 사용하여 원하는 출력문을 함
table(sex.factor)
#summary() 함수를 사용하여 원하는 출력문을 함(방법2)
summary(sex.factor)
#####추가 문제#####
# 혈액형
c('B', 'A', 'O', 'B', 'AB')
#####추가 문제#####
# 혈액형
blood = c('B', 'A', 'O', 'O', 'B', 'AB')
blood.factor = as.factor(blood); blood.factor
blood.factor = factor(blood); blood.factor
blood.factor2 = factor(blood, levels = c('A', 'B', 'AB', 'O'))
blood.factor2 = factor(blood, levels = c('A', 'B', 'AB', 'O')); blood.factor2
blood.factor2 = factor(blood, levels = c('A', 'B', 'AB', 'O'), lable = c('BT_A', 'BT_B', 'BT_AB', 'BT_O')); blood.factor2
blood.factor2 = factor(blood, levels = c('A', 'B', 'AB', 'O'), lables = c('BT_A', 'BT_B', 'BT_AB', 'BT_O')); blood.factor2
blood.factor2 = factor(blood,
levels = c('A', 'B', 'AB', 'O'),
lables = c('BT_A', 'BT_B', 'BT_AB', 'BT_O')); blood.factor2
blood.factor2 = factor(blood,
levels = c('A', 'B', 'AB', 'O'),
lables = c('BT_A', 'BT_B', 'BT_AB', 'BT_O')); blood.factor2
blood.factor2 = factor(blood,
levels = c('A', 'B', 'AB', 'O'),
lables = c('BT_A', 'BT_B', 'BT_AB', 'BT_O'));
blood.factor2 = factor(blood, levels = c('A', 'B', 'AB', 'O'), labels = c('BT_A', 'BT_B', 'BT_AB', 'BT_O')); blood.factor2
#데이터 타입 확인하는 3가지 방법
str(m1)
class(m1)
typeof(m1)
#data.frame()
#열 단위로 데이터들이 같은 데이터 타입이라면??
df1 = data.frame(aa = 1:5, bb = letters[1:5], cc = as.factor(c(1:5)))
#data.frame()
#열 단위로 데이터들이 같은 데이터 타입이라면??
df1 = data.frame(aa = 1:5, bb = letters[1:5], cc = as.factor(c(1:5))); df1
lt1[2]
lt1[1]
sex.factor = factor(sex,
label = c('남','여')); sex.factor
sex.factor = factor(sex); sex.factor
sex.factor = factor(sex, levels = c(1,0),
label = c('남','여'))
sex.factor = factor(sex, levels = c(1,0),
label = c('남','여')); sex.factor
#데이터 타입 확인하는 3가지 방법
str(m1)
typeof(m1)
class(m1)
